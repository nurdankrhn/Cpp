using inta10 = int[10];

void foo(int(*p)[10]);
void bar(int p[][10]);
void baz(inta10 *);

int main()
{
  int a[10]{};
  foo(&a);
  bar(&a);
  baz(&a);
  
}

10 elemanlı int bir dizinin adresini döndüren fonksiyon tanımı:
int a[10]{};

using inta10 = int[10];
using inta10ptr = int(*)[10]; 

int(* foo())[10]
{
    return &a;
}

inta10* bar()
{
    return &a;
}

inta10ptr bar()
{
    return &a;
}



Aşağıdaki bildirimde overloading vardır:
void func(int, int = 0);
void func(int);


Aşağıdaki bildirimde redeclaration vardır:
void func(int, int = 0);
void func(int, int);

Aşağıdaki bildirimde sadece 1 tane overload vardır:
void func(int, int, int = 0);
void func(int, int = 0 , int);
void func(int, int, int);

void foo(int&);
void foo(int *);
void foo(int); //3 tane overload vardır


class Myclass{};

void func(Myclass&);
void func(Myclass&&);//2 tane overlaod vardır.

class Myclass{};

void func(const Myclass&);
void func(Myclass&);
void func(Myclass&&);//3 tane overlaod vardır.

int x{};

void foo(int);
void foo(decltype(x));//redeclaration;

void foo(int);
void foo(decltype((x)));//2 tane overload olur decltype((x)) PR val exp. tür int& olur;

Function Overload Resolution
Dilin en önemli konularından biridir. Karşımıza sık olarak çıkar. Function Overload Resolution yani hangi fonksiyonun çağırılacağı süreci dilin kuralları ile belirlidir.
Function overloading olması her fonksiyon çağrısının geçerli bir yapı oluşturması anlamına kesinlikle gelmez!! Yani function overloading var diye o fonksiyon çağrısı ile yapılan tüm çağrılar legal olmaz. Yani function overload resolution
sentaks hatası ile sonuçlanabilir. 2 farklı sentaks hatası vardır:
1)overload'lardan hiçbirinin uygun olmaması (no match yani uygun fonksiyon yok) yani yapılan fonksiyon çağrısı ile bildirilen fonksiyonların hiçbiri legal olarak çağırılamaz.
2)Birden fazla uyumlu fonksiyon olması (ambiguity). Fakat 2 uyum olması nedeni ile dilin kuralları ikisi arasında  bir seçim kriteri oluşturamadığı için hata meydana gelir.

Function Overload Resolution Nasıl Yapılır?
Maksimum 3 aşamalı bir süreçtir:
1. aşamada derleyici fonksiyon çağrısının yapıldığı noktada visible olan fonksiyonların bir listesini çıkarır. Bu listede yer alan fonksiyonlara aday fonksiyonlar denir. Ardından aday fonskiyonların parametrik yapılarını imzalarını not
ediyor.
2. aşamada argüman olan ifadeler ile legal olarak çağırılabilecek fonksiyonları ayıklar. Buradan seçilen fonksiyonlara viable function denir. Viable olması için fonksiyon çağrısında kullanılan argüman sayısının overload'un parametre sayısına
eşit olması gerekir. Ve her bir argümandan ilgili parametre değişkenine örtülü dönüşümün olabilmesi gerekiyor. Eğer tanımlanan öyle bir dönüşüm yoksa o fonksiyon viable değildir.

candidate function--->aday fonksiyon
viable function--->uygun fonksiyon

2. aşamada uygun fonksiyon sayısı 1 ise uygun fonksiyon çağırılır.
Eğer 2 yada daha fazla overload viable ise derleyici en uygununu best viable/match olanını bulur ya da dilin kuralı 2 veya daha fazla uygun fonksiyon arasında seçilebilirlik
arasında bir fark görmeyecek ve bu durumda ambiguity olur.

best viable fonksiyonu derleyici bulmaya çalışırken:
Argümandan parametre değişkenine aktarımın geçerli olması durumunda bazı ihtimaller var. Argümandan parametreye aktarım geçerliliği farklı kalite gruplarına bölünmüştür:

Bütün viable rakiplerine kaybeden dönüşüm variadic conversion'dur.
C'de son parametresi elipsis atomı olan fonksiyonlardır: void foo(int, ...); printf, scanf fprintf, sprintf, fscanf vb standrt C fonk. da variadic fonksiyonlardır.
C++'ta variadic fonksiyonun C'deki fonksiyondan farkı parametre olarak tek başına elipsis atomu ile tanımlanabilmesi:
void bar(...);//C'de sentaks hatası C++'ta geçerli

İşte void foo(...); bildirimine sahip bir fonksiyona  her türden argüman gönderebildiğim için bu variadic conversion oluyor.

void foo(...);'nun diğer viable'lardan daha düşük kalitede olduğundan diğere karşı kaybeder:

variadic conversion'dan daha iyi olan  C'de olmayan user-defined conversion karşımıza çıkar. 
user-defined conversion:C++'ta sınıflar işin içine girince şöyle bir durum oluşur
normalde olmayan dilin sentaksında örtülü olarak yapılamayan bazı dönüşümler programcının 1 fonksiyon bildirmesi neticesinde derleyicinin o bildirilen fonksiyona örtülü olarak
çağrı yaparak bir dönüşüm gerçekleştirme sonucunu doğurmasına denir.

class Myclass {
public:
  Myclass();
  Myclass(int);
};

int main()
{
    Myclass x ;
    x = 5; //int türünden Myclass türüne örtülü dönüşüm Myclass(int); fonksiyonu sayesinde yani user-defined conversion sayesinde oldu
}

kötüden iyiye doğru:
variadic conversion
user-defined conversion
standart conversion: dilin kuralları açısından legal olan dönüşümlerdir:
int --> char
char --> int
int --> double
double --> int
int * --> void *
int --> bool
bool --> int
unscoped enum --> int
