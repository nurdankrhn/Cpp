01 Şubat 2023 - ÇARŞAMBA

class Myclass {
  int mx;
public:
  void func(int);
  };

int main()
{
    Myclass m;
    Myclass *p{&m};

    m.func(11);
    p->func(23);
}

Function member class objesinin size'ını değiştirmiyordu aynı şekilde type member'larda size'ını değiştirmezler. Fakat o type türünden değişken tanımlarsak o zaman tabii kide
size artar:
class Myclass {
  int x, y;
  class A {
    int a, b;
  };
};
sınıfın size'ı int türünün 4 byte yer kapladığı varsayımıyla 8'dir.
class Myclass {
  int x, y;
  class A {
    int a, b;
  };
  A a1;
};
sınıfın size'ı int türünün 4 byte yer kapladığı varsayımıyla 16'dır.


class anahtar sözcüğü ile tanımlanan sınıf tanımı içinde eğer ki değişken için herhangi bir erişim belirteci kullanmazsam default erişim bölgesi olarak sınıfın private bölümü olur.
class Myclass {
  int mx;
};

struct anahtar sözcüğü ile tanımlanan sınıf tanımı içinde eğer ki değişken için herhangi bir erişim belirteci kullanmazsam default erişim bölgesi olarak sınıfın public bölümü olur.
struct Myclass {
  int mx;
};

struct Myclass {
  int foo();//sınıfın private non-static member function
};

public, private ve protected anahtar sözcükleri sınıf tanımında birden fazla kez kullanılabilir.

Sınıfın üye fonksiyonları:
class Myclass {
  public:
    void foo();
  private:
    int mx;
}

Acaba foo fonksiyonunun global fonksiyondan hangi farklılıkları vardır:
foo global bir fonksiyon olarak şuna karşılık gelir:
void gfoo(Myclass *p)
{
  //p->mx; sentkas hatası
}

global fonksiyonlar için bir erişim kontrolü yoktur. Global isimlerde isim arama kurallarına göre aranır. Global fonksiyonlar parametreleri sınıf türünden pointer olabilir
veya referans olabilir fakat o sınıfın private bölümüne erişemezler. Private bölüm sadece sınıfın kendi kodlarına açıktır sınıfın dışındaki kodlara kapalıdır. public bölüm herkese
açıktır, private bölüm sadece sınıfın kodlarına açık protected bölüm ise sınfın kodlarına ve kalıtım yoluyla o sınıftan elde edilecek sınıflara açıktır.

int main()
{
    Myclass mx;
    gfoo(&mx);
}

structure'lar genellikle bütün elamanları public olması istenen sınıf tanımlarında kullanılır. Bu sınıflara aggrate types denir ve ilave bazı haklar kazanır. Ayrıca
teknik olarak struct anahtar sözcüğünü kullanıp  sınıf oluşturup private bölüm oluşturulabilir fakat pratikte çok tercih edilmez.


private bölümde dataların gizlenmesine data hiding veya information hiding denir. Yani sınıfın data memberlarını tipik olarak private bölümünde koyup, kendi işlerimi
sınıfın içişlerine yönelik yardımcı fonksiyonları client'ların doğrudan çağırmasını istemediğim fonksiyonları (helper function) private bölüme koyuyorum böylece aslında 
client kodlara diyorum ki burası seni ilgilendirmez. Böylece bozulma ihtimali olan yapıların önüne geçilir.


Neden private bölüm/elamanlar var?
1. öğrenme yükünü ortadan kaldırır, kullanım kolaylığı sağlar. Her şey açık olacaksa programcı her şeyi bilmek zorunda ayrıca tam bilinmediğinde yapıyı bozadabilir: buna örnek C'deki struct tm.
2. sınıf nesnelerinin işleyiş bozukluğu ihtimali ortadan kalkar.

C#, java gibi dillerde bir sınıfın public arayüzü class definition içinde sınıfın public bölümünden oluşur:
class Myclass {
public:
//data members, member functions ve nesnted types
};
Fakat C++'da böyle değildir. C++'ta bir sınıfın arayüzü ya da public interface'i dediğimiz zaman buna şunlar dahildir: dışarıya hizmet verme iddiasında olan sınıflar tipik olarak
başlık dosyalarında tanımlanırlar:
//myclass.h
class Myclass {
public:
//
};

myclass.cpp
//code
veya header-only library. Dikkat edilirse C++ javadaki gibi değil; C++'ta clientlara hizmet vermenin bir yolu sınıfın public bölümündeki üye fonksiyonlar, veri elemanlar, nested typelar
fakat bizde hala global fonksiyonlar var. Yani üye fonksiyonların hayatımıza girmesi C'de olmayan member functionların C++'ta dile eklenmesi global fonksiyonları hayatımızdan
çıkartmaz!!!

int compare_xyz(const Myclass&, const Myclass&);
Bu şekilde fonksiyon bildirimi/tanımı C++'ın standart kütüphanesinin modüllerinde, 3. parti kütüphanelerde çok sık bulunur. Yani biz gidip bir modülden hizmet aldığımızda bir 
başlık dosyasını tipik olarak include ettiğimizde oradan tipik olarak bir veya birden daha fazla sınıf tanımı gelir. Biz işimizi halletmek için sınıf nesneleri oluşturup
o nesneler yoluyla sınıfın public üye fonksiyonlarını çağırdığımız gibi bazende sınıf nesnelerini global fonksiyonlara argüman olarak gönderebiliriz. Dolayısıyla başlık
dosyasında içinde bize sunulan global fonksiyonlar C++'ta halen class'ın public interface'nin bir bileşenidir. C#, java gibi dillerde global function yoktur.


Erişim kontrolü sadece veri elemanı ile ilgili değildir; erişim kontrolü bütün member'larla ilgilidir.

class Myclass {
  class Nested{

  };
};

int main()
{
  Myclass::Nested x;//erişim hatası çünkü nested type olan Nested değişkeni private bölümde sadece kendi sınıfına açık.
}

protected bölümde bulunan kodlarda client koda kapalıdır private bölümden farkı ise Myclass sınıfından inheritance aracıyla bir sınıf oluşturduğumuzda o kalıtım yoluyla elde
edilen sınıf(böyle sınıflara child class veya sub class, derived class)'a kodları açıktır. (kalıtım edilen sınıfa ise parent/super/base class denir) kalıtımın implementasyon tarafına derivation
denir.
