Referans semantiği
C++'ta C'deki pointer semantiğinin eş değeri, pointer semantiğine bir alternatif Referans Semantiği vardır. 
Pointer semantiğine ek böyle bir semantiğinin bulunmasının nedeni pointer semantiğinin dildeki bazı araçlarına uyum sağlamaması:
*operatör over loading'de implementasyon olanağı olmazdı.
*pointer kullanımı program domaininden ziyade programlama dili domainine itiyor. Yani düşünürken programlama dilinin kavramlarıyla düşünmeye itiyor. Oysa C++'nin iddiası iyi bir data absrtaction sağlamak.
Yani mümkün olduğu kadar programcının programlama dilinin kavramları ile değil problem domain'nin kavramları ile düşünmesini sağlamaktır.

Pointer yerine referans kullanılması genel anlamda derleyici için bir farkı yoktur, yani bu dil seviyesinde olan bir kavram. Sonuçta pointer için de referans içinde aynı assembly kodu üretilir.

Pointer kullandığımız her yerde referans kullanamayız. Referans şu yerlerde kullanılır:
Bir pointer bir fonksiyonun parametre değişkeni olacaksa,
Pointer vasıtası ile bir nesneye erişiceksek,
Bir nesnenin adresini fonksiyona göndericeksek,
Bir fonksiyondan bir nesnenin adresini geri dönüş değeri olarak aldığımız yerlerde

Eski C++'ta referans semantiği için sadece reference dediğimiz zaman ilave niteleyici olması gerekmiyordu çünkü zaten tek çeşitti. Modern C++'ta 3 farklı referans semantiği vardır:
L value reference
R value reference
Forwarding reference (universal reference)

Aksine belirtmediğimiz sürece reference semantiği dediğimiz zaman l value reference'ı kast etmiş olacağız.

C++'ta en önemli kavramlardan biri "expression"'dır. 


Her ifadenin bir data type'ı olduğu gibi value category'si de vardır. C de value category ya L value ya da R value değer kategorisinde olur.

C için:

L value---> Bellekte bir nesneye karşılık geliyor demek yani onun elde edebileceğimiz bir adresi vardır. (nesne gösteren ifade )
R value---> Bazı amaçlarla kullanabilir, örneğin bir değişkene ilk değer vermede. Ama bellekte doğrudan bir karşılığı yok (nesne göstermeyen ifade )

Bir değerin R value yada L value olduğunu unutursa kısa yoldan:
Adres operatörünün operandı yaparız; eğer ki senkats hatası olmazsa L value olursa R value olur. 

İster tekil ister dizi olsun, değişkenlerin oluşturduğu ifadeler L value expressiondır.

int main()
{
    int x;
    int a [] = {0, 2};
    x // L value expression
    a // L value expression
}

Bazı operatörler ile oluşturulan ifadelerde L value expression olur (içerik operatörü ile, indeks operatörü ile ve ok operatörü (member selection operatörleri ile oluşturulan ifadeler )):

int main()
{
    int x = 10;
    int *p = &x;

    *p // L value expression &(*p) yapınca da sentaks hatası olmaz
    int a[20] = {0};
    a[0] // L value expression
}

Fakat aritmetik operatörler ile oluşturulan ifadeler: karşılaştırma operatürü, işaret operatürü dahil olmak üzere lojik operatörü  ile oluşturulan bütün ifadeler R value expression olur:

int main()
{
    int x = 10;
    int *p = &x;

    +x // R value expression
    x -5 //R value expression

}

Sabitlerin tek başına veya beraber oluşturduğu ifadeler yine R value expression olur.


Zaten derleyicinin bulgu iletilerinde de çok karşımıza çıkar:

int main()
{
    int x = 5;
    ++x; //normal bir kod satırı
    ++(x + 3); //sentaks hatası derleyicinin verdiği error: '++' needs l value 
    
}


Modern C++ ile referans semantiğinin 3 çeşidi ile beraber; dile eklenen yeni eklemeler ile bu 2 araç artık kolaylıkla implemente edilebilir hale geldi:
move semantics
perfect forwarding

Eski C++'ta bu araçların doğrudan uygulanamıyordu, sentaks yetersiz kalıyordu. 

C++'ta value category:
  primary value category:
    L   value
    PR  value (pure R value)
    X   value (eXpiring value)
Derleyici bir ifadeye baktığında statik olarak koda baktığında değer kategorisini anlıyor mu?
KESİNLİKLEEE! Nasıl bir ifadenin türü derleyici statik olarak koda baktığında anlıyorsa, C++'ta da yine ifadenin değer kategoriside   derleyici koda bakarak (run time'dan bağımsız ) anlar.
Bir ifadenin katgorisi value categoryden sadece biri olur aynı anda birden fazla kategoriye ait olmaz.!!!

ön ek ++ operatörü ile oluşturulan ifadeler C'de R valu expression iken C++'ta L value expression oluyor (++x). Fakat son ek operatörü ile oluşturulan ifadeler (x++) C++'ta da R value expression'dır.

Adres operatörü ile oluşturulan ifadeler PR value expression: &x;
nullptr--> PR value expression
int foo(); şeklinde bir fonksiyon olsun foo(); ifadesi de PR value expression olur.

int& foo(); şeklinde bir fonksiyon olsun foo(); ifadesi de L value expression olur.

int&& foo(); şeklinde bir fonksiyon olsun foo(); ifadesi de X value expression olur.

NOT: Değişkenlerin value category'si olmaz (değişkenleri data type'ı olur), ifadelerin value kategory'si olur.


C++ dilinde aşağıdaki ifadeler L value expression'dır:
her türlü değişken isminin oluşturduğu ifadeler:
ptr, a, vb.

C ve C++'ta ifadenin R ve L value category olması açısından bazı farklılıklar vardır:


               C        C++
++x            R         L
--x            R         L
a = b          R         L
x, y           R         L     //C de virgül operatörü oluşturulan ifadelerde sağ operand L value expression olsa dahi R value expression fakat C++'de sağ operand L value exprss. ise ifadenin  
                                                                                                                                                                //kendisi de L value expression olur.
x > y ? a : b  R         L     //C de koşul operatörünün 2. ve 3. operandları eğer L value expression ise C de ona rağmen R C++'ta ise L value expression olur.

C++'ta primary value category dışında combined value categories var:
GL value     L value or X value (generalized L value)
R value      PR value or X value


L value reference
Bir L value reference oluşturmak için önce referans olan değişkenin hangi nesnye bağlanacağını yazıp sonrasında referans deklaratörü olarak & token'ını kullanıyoruz. Sonrasında da referans'a 
verdiğimiz ismi yazıyoruz. 
Önemli bir kural: Referanslar default initialize edilemezler!!!! sentaks hatası
Referanslara ilk değer verme mecburi,aynı türden bir L value expression ile ilk değer vermeliyiz.
int x = 34;
int& r = x; // Burada r refaransını x'e bağlamış oluyoruz. Artık r'nin skopu içinde r ismini kullandığım her yerde x değişkenini kullanmış olacağım.

int main()
{

    int x = 34;
    int& r = x; 

    int y = 5;

    ++r; //++x;
    r = 88; // x = 88;

    r = y; // r'yi y'ye bağlamıyorum x'e y'yi atıyorum. Yani pointer'lardan farklı olarak referansları bir kere bir nesneye bağlayarak oluşturduğumda artık başka bir nesneye bağlanma ihtimali yoktur!!!
    
}








