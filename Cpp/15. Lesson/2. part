 Her special member functionda olduğu gibi derleyicinin yazdığı fonksiyon işimize yarıyor ise her zaman onu kullanmalıyız(rule of zero). O halde move ctor ve move assigment içinde 
 aynı durum söz konusudur. İdeali copy ctor'unda move ctor'unda copy assigment'ında move assigment'ında derleyici tarafından yazılması.

 Derleyicinin move ctor'u ve move assigment'ı nasıl yazdığını anlamadan önce önemli bir konuyu tekrar hatırlamakta fayda var:
 
 data type ile value category'i karıştırmamamız gerekir. Örnekte r'nin declaration type'ı int&&'tir. Fakat r ifadesinin value category'si
 L value expression'dur. r R value referans olduğuna göre func(r) içinde olan r ifadesi de R value expression olmaz!!! Çünkü değişken
 ifadeleri yani bir değişkenin ismi biçiminde olan ifadeler her zaman L value expression'dır. 


void func(const int&)
{
    std::cout << "const LVALUE REF\n";
}

void func(int&&)
{
    std::cout << "RVALUE REF\n";
}

int main()
{
  int&& r = 10;
  func(r);//func(const int&) parametreli fonksiyon çağırılır
}

YANİ bir ifade bir değişken isminin oluşturduğu ifade ise değişkenin hangi türden olduğuna bakılmaksızın ister L value referans olsun ister R value referans olsun 
bu değişkenin oluşturduğu ifadenin value category'si L value expression'dur. 

Eğer yukarıda const int& parametreli fonksiyonun değilde int&& parametreli fonksiyonunun çağırılmasını istiyorsak r L value expression olduğundan onu R value expression
olucak şekilde cast etmeliyiz:
void func(const int&)
{
    std::cout << "const LVALUE REF\n";
}

void func(int&&)
{
    std::cout << "RVALUE REF\n";
}

int main()
{
  int&& r = 10;
  func(std::move(r));//artık func(int&&) parametreli fonksiyon çağırılır çünkü value category değiştirme fonksiyonu sayesinde L val. expr. olan r ifadesi R val. expr'ye cast edildi
}

A, B, C birer tür olmak üzere: derleyicinin yazdığı move ctor şu şekilde olur:

#include <iostream>
#include <string>

class Myclass {
public:

  Myclass(Myclass &&other) : m_a(std::move(other.m_a)), m_b(std::move(other.m_b)), m_c(std::move(other.m_c))
  {                         //move fonksiyonunu kullanmadan C.I.L kullanılsaydı o zaman m_a, m_b  ve m_c sınıf türünden olsaydı bu durumda argüman olan ifade L
                            // value expr. olduğundan sınıfın copy ctor'ı çağırılırdı move ctor çağırılması için işte move ile R val expr.'ye cast edilmelidir.
      
  }
private:
  A m_a;
  B m_b;
  C m_c;
};

int main()
{
  
}


Elemanları kaynak kullanan ve kendi kaynağını yöneten sınıflar olduğu zaman; move ctor'ın derleyici tarafından yazılması ideal durumu oluşturur.

Derleyicinin yazdığı move assigment ise şu şekilde default edilir:
#include <iostream>
#include <string>

class Myclass {
public:
  Myclass& operator=(Myclass &&other)
  {
      m_a = std::move(other.m_a);
      m_b = std::move(other.m_b);
      m_c = std::move(other.m_c);

      return *this;
  }
private:
  A m_a;
  B m_b;
  C m_c;
};



Peki hangi durumlarda ben sınıfın move ctor ve move assigment'ınını yazmalıyım?
Eğer sınıfın veri elemanlarından biri veya birden fazlası pointer/referans ise taşınması veya kopyalanması arasında bir fark olmaz. Dolayısıyla sınıfın en az bir veri elemanı pointer veya
refarans yani handle ise derleyicinin yazdığı taşıma operator fonksiyonu veya move ctor pointer'ı kopyalar. Dolayısıyla value semantics yine bozulur. move ctor'un kodunu biz yazarken
diğer nesnenin kaynağını çalacağız ama diğer nesneyide destructor'ı çağırıldığında bu kaynağı geri vermeyecek şekilde bir duruma getirmemiz gerekiyor.

Taşıyan atama operatör fonksiyonun kodunu yazdığımızda durum daha da farklıdır. Çünkü her 2 nesnede hayattadır. Örneğin Myclass y = x'de y'ye x'i atadığımızda y x'in kaynağını çalacak
ama öncesinde kendi kaynağını geri vermelidir.

Kendimiz bu şartları sağlayacak bir move ctor ve move assigment  yazalım:
#include <iostream>
#include <cstring>
#include <cstdlib>

class String {
public:
  String(const char *p) :
  mlen{ std::strlen(p) },
  mp{ static_cast<char *> (std::malloc(mlen + 1)) }
{
    std::strcpy(mp, p);
}

String(const String& other) : mlen(other.mlen), mp{  static_cast<char *> (std::malloc(mlen + 1)) }
{
    std::strcpy(mp, other.mp);
}
String(String &&other): mlen(other.mlen), mp(other.mp)
{
   other.mlen = 0;
   other.mp = nullptr;
}
String& operator=(String &&other)
{
   if(this == &other)
     return *this;

   std::free(mp);
   mlen = other.mlen;
   mp = other.mp;

   other.mlen = 0;
   other.mp = nullptr;

   return *this;
}
String& operator=(const String& other)
{
  if(this == &other)//if'e girerse self assigment var demektir!!
    return *this;
   mlen = other.mlen();
   std::free(mp);
   mp = static_cast<char *> (std::malloc(mlen + 1));
   std::strcpy(mp, other.mp);
    return *this;

}
~String()
{
    if(mp)
      std::free(mp);
}
void print()const
{
    std::cout << mp << '\n';
}

std::size_t length()const
{
    return mlen;
}
bool empty()const
{
    return mlen == 0;
}
private:
  std::size_t mlen;
  char *p;
};

Belirli özel koşullar sağlandığında derleyicinin sınıfın özel üye fonksiyonlarını default ettiğini söylemiştik. Fakat hangi durumlarda derleyici sınıfın hangi özel üye fonksiyonuna karşı nasıl bir yol izliyor? Onu ele alalım:

1. Senaryo
programcı bir sınıf için hiçbir özel üye fonksiyon bildirmemiş ve ayrıca hiçbir construtor'da(özel olmayan yani) bildirmemiş.

Bu durumda derleyici 6 özel üye fonksiyonunuda implicitly declared edip default eder.  
class Myclass {
public:

};

yani bunun aşağıdaki sınıf tanımından hiçbir farkı yoktur:
class Myclass{
public:
  Myclass() = default; //default constructor
  ~Myclass() = default; //destructor
  Myclass(const Myclass&) = default; //copy constructor
  Myclass& operator=(const Myclass&) = default; //copy assigment
  Myclass(Myclass&&) = default; //move constructor
  Myclass& operator=(Myclass&&) = default; //move assigment
};

2. Senaryo
programcı bir sınıf için default constructor olmayan ve special member function olmayan bir constructor bildirirse:
class Myclass {
public:
  Myclass(int);
};
Burada genel kuralı hatırlamamız gerekir: bir tane bile constructor bildirirsek derleyici default constructor'ı implicitly declared etmez. Yani sınıfın default constructor'ı artık not declared.
O zaman sınıfın karşılığı şu olur:
class Myclass{
public:
  Myclass(int); //programcının tanımladığı constructor
  ~Myclass() = default; //destructor
  Myclass(const Myclass&) = default; //copy constructor
  Myclass& operator=(const Myclass&) = default; //copy assigment
  Myclass(Myclass&&) = default; //move constructor
  Myclass& operator=(Myclass&&) = default; //move assigment
};

3. Senaryo
programcı bir sınıf için default constructor bildirirse yani default constructor user declared olursa:
class Myclass {
public:
  Myclass();
};

O zaman sınıfın karşılığı şu olur:
class Myclass{
public:
  Myclass(); //default constructor user declared
  ~Myclass() = default; //destructor
  Myclass(const Myclass&) = default; //copy constructor
  Myclass& operator=(const Myclass&) = default; //copy assigment
  Myclass(Myclass&&) = default; //move constructor
  Myclass& operator=(Myclass&&) = default; //move assigment
};

4. Senaryo
Programcı sınıfa bir destructor bildirirse:
class Myclass {
public:
  ~Myclass();
};

O zaman deleyici move member'ları default etmez ve sınıfın karşılığı şu olur:
class Myclass{
public:
  Myclass() = default; //default constructor 
  ~Myclass(); //destructor user declared
  Myclass(const Myclass&) = default; //copy constructor!!
  Myclass& operator=(const Myclass&) = default; //copy assigment!!
};
Eğer böyle bir sınıf oluşturursak derleyici default constructor'ını default ettiği gibi copy constructor'ınıda copy assigment'ınıda default eder. Bu bir felakete yol açar;
çünkü destructor'ı kendimiz bildirdiğimize göre muhtemelen destructor içinde kaynak geri vericez; fakat copy ctor ve copy assigment derleyici tarafından yazılan fonksiyonlar
olduğu için uygun şekilde yani pointer yerine kaynak koypalaması yapamaz hala shallow copy yapar!!! C++ komitesinin istediği copy ctor ve copy assigment'ında delete edilmesi
fakat o zaman geçmiş kodların kırılmaması için bu kural hala geçerli; bu kırmızı alarm demek asla asla böyle bir duruma neden olacak kod yazmamalıyız!!!!
Burada dikkat edilmesi gereken bir diğer şey; move ctor'ın veya move assigment'ın çağırılacağı yerde copy ctor ve copy assigment çağırılır.

5. Senaryo
programcı copy constructor bildirirse
class Myclass {
public:
  Myclass(const Myclass&);
};
O zaman sınıfın karşılığı şu olur: programcı constructor bildirdiği için derleyici constructor default etmeyecek; genel kural
class Myclass{
public:
  ~Myclass() = default; //destructor
  Myclass(const Myclass&); //copy constructor user declared
  Myclass& operator=(const Myclass&) = default; //copy assigment!!
  Myclass(Myclass&&) = default; //move constructor
  Myclass& operator=(Myclass&&) = default; //move assigment
};
Derleyicinin copy assigment'ıda default etmesi felakete neden olur çünkü copy ctor'ı biz yazıyorsak copy assigment'ıda bizim yazmamız gerekir.

6. Senaryo
programcı copy assigment bildirirse
class Myclass {
public:
  Myclass& operator=(const Myclass&);
};

O zaman sınıfın karşılığı şu olur:
class Myclass{
public:
  Myclass() = default; //default constructor 
  ~Myclass() = default; //destructor
  Myclass(const Myclass&) = default; //copy constructor!!
  Myclass& operator=(const Myclass&); //copy assigment user declared
};

7. Senaryo
programcı move constructor  bildirirse
class Myclass {
public:
  Myclass (Myclass&&);

};

O zaman sınıfın karşılığı şu olur:
class Myclass{
public:
  ~Myclass() = default; //destructor
  Myclass(const Myclass&) = delete; //copy constructor deleted
  Myclass& operator=(const Myclass&) = delete; //copy assigment deleted
  Myclass(Myclass&&); //move constructor user declared
};

8. Senaryo
programcı move assigment  bildirirse
class Myclass {
public:
  Myclass& operator=(Myclass&&);

};

O zaman sınıfın karşılığı şu olur:
class Myclass{
public:
  Myclass() = default; //constructor  
  ~Myclass() = default; //destructor
  Myclass(const Myclass&) = delete; //copy constructor deleted
  Myclass& operator=(const Myclass&) = delete; //copy assigment deleted
  Myclass(Myclass&&); //move constructor user declared
   Myclass& operator=(Myclass&&);//move assigment user declared
};
