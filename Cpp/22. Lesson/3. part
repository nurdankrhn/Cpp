Sınıfın static üye fonksiyonunun çağırılabilmesi için hayatta bir sınıf nesnesin olma şartı yok süphesiz.  
Yani ortada bir tane bile sınıf nesnesi yokken bile sınıfın static üye fonksiyonu çağırılabilir çünkü
instance ile çağırılan bir fonksiyondur. 



static üye fonksiyonları sınıf nesnesi ile değil sınıf ile ilgili genel işlemleri yapar. 

örneğin Date isimli sınıfın rastgele tarih üreten fonksiyonu olsa, bu fonksiyon global de olabilir
static üye fonksiyonu da olabilir.
class Date {
public:
    static Date random_date();
};

int main()
{
    auto mydate = Date::random_date();
}

static üye fonksiyonlara standart kütüphaneden örnekler:

#include <chrono>
#include <iostream>

int main()
{
    using namespace std;
    using namespace std::chrono;

    system_clock::from_time_t()//static member func.
    system_clock::to_time_t()//static member func.
}

tabii bunlar global de yapılabilirdi; duruma göre genellemeler olsa da biz senaryomuza hangisi uygunsa onu seçeriz.

Kısa bir tekrar: function pointer

int foo(int);

using FPTR = int (*)(int);

int main()
{
    auto f1 = foo;
    auto f2 = &foo;
    int (*fp3)(int) =&foo;
    FPTR fp4 = &foo;
    decltype(f1) fp5 = &foo;

}

Sınıfın non-static üye fonksiyonu bir this pointer'ına sahip yani sınıfın non-static üye fonksiyonun adresini aşağıda verilen
pointer adresinde tutamayız; tür uyuşmazlığı vardır:
class Myclass {
public:
    int foo(int);
};

int main()
{
    int (*fp)(int) = &Myclass::foo;//sentaks hatası
    //int (Myclass:: *fp2)(int) = &Myclass::foo; şeklinde olmalıydı
}
burada pointer değişken farklı şekilde tanımlanmalı, ilerde ele alacağız buna member function pointer denilir.
Demek ki sınıfların non-static üye fonksiyonlarının adresleri C++'ın sentaksına göre özel bir türden bu türü ilerde
inceleyeceğiz. Dolayısıyla normal global fonksiyonların adreslerini tutacak pointerlara sınıfın non-static üye 
fonksiyonlarının adreslerini atayamayız. Fakat sınıfın static üye fonksiyonu this pointer'ına sahip olmadığı için 
onları bu şekilde kullanabiliriz.

class Myclass {
public:
    static int foo(int);
};

int bar(int);

int main()
{
    int (*fp)(int) = Myclass::foo;
    fp = bar;
}   
yani statik üye fonksiyonların adreslerini tutan function pointer ile aynı parametrik yapıdaki global fonksiyonların
adreslerini tutan fonksiyon pointerları arasında türsel açıdan bir fark yoktur.


Static üye fonksiyonlarının genel kullanım alanları(mülakatlarda da sık sorulur)

1. tipik tema: sınıfın private bir statik veri elamanını get eden sınıfın statik üye fonksiyonunun olması:

#include <vector>

class Myclass  {
public:
    static std::size_t get_size()
    {
        return msvec.size();
    }

private:
    static std::vector<int> msvec;
};

2. tipik tema: named constructor idiom; isimlendirilmiş ctor olmaz ctor'ın ismi sınıf ismi olur fakat öyle durumlar var ki
bir sınıfa ctor koymak yerine ctor gibi kullanılacak ama isimlendirilmiş bir fonksiyon vermeyi uygun görüyoruz. Bunu yapmanın
çok çok farklı nedenleri olabilir. Örneğin:

a)en tipik nedenlerden biri örneğin karmaşık  sayı nesnesi için bir ctor kartezyen olarak diğeri de polar gösterim olarak 
hayat getirsin karmaşık sayı nesnesini:
class Complex {
public:
    Complex(double real, double imag);
    Complex(double angle, double distance);
};
yukarıda ctor için redeclaration oluşur ve sınıfın üye fonksiyonu için redeclaration yapılamadığı için sentaks hatası meydana gelir.
aslında semantik olarak hata olmamasına rağmen sentaks hatası meydana gelir.  Bunu çözmek için:

class Complex {

public:
    static Complex create_cartesian(double r, double i)
    {
        return Complex{r, i};
    }
    static Complex create_polar(double angle, double distance)
    {
        return Complex{angle, distance, 0};
    }
private:
    Complex(double r, double i);
    Complex(double a, double d, int);
};

yukarıda ctor'lar private bölümde olmasına rağmen create_cartesian ve create_polar fonksiyonları ctor'ları kullanabilir;
çünkü o fonksiyonlar sınıfın static üye fonksiyonları dolayısıyla sınıfın priavte bölümüne erişebilir. Böylece az önce 
aldığımız redeclaration hatasından kurtulduk ve ctor'lardan birine dummy int parametre vererek polar gösterim için olan 
fonksiyonun yeni nesne oluştururken onu çağırmasını kartezyen gösterim içinde 2 parametreli ctor çağırılmasını sağladım.
Bu sayede client'a gerekiz yükte yüklememiş oldum bu tekniği direk static üye fonk. kendisinde uygulasaydım iyi bir soyutlama
yapmamış olurdum çünkü bunu çağıracak client kodunda bunu bilme zorunluluğunu getirmiş olurdum.


b)örneğin aşağıda yine aynı mantıkla sadece dinamik ömürlü nesne oluşuma izin veren bir sınıf implementasyonu verilmiştir:
Çünkü sınıfın default ctor'u private olduğu için artık otomatik ömürlü nesne ya da statik ömürlü nesne oluşturma ihtimali 
yoktur; nesne oluşturmanın tek yolu sınıfın static üye fonksiyonu create'i çağırmak. create çağırıldığında new ifadesi ile
nesneyi oluşturduğu için artık client kodlar bu sınıf türünden  dinamic storage'ı kullanmaya zorlamış oluyoruz.
class Donly {
public:
    static Donly* create()
    {
        return new Donly{};
    }
    Donly(const Donly&) = delete;
    Donly& operator=(const Donly&) = delete;
private:
    Donly();
};


3)singleton pattern 
pattern(örüntü - kalıp - patern - desen) dendiğinde dilden bağımsızlık vurgulanır. Örneğin singleton C++ ile ilgili
değil, diden bağımsızdır yani singleton örüntüsünü javada da go'da da bir şekilde oluşturabiliriz.

Fakat; 
idiom/teknik dediğimiz zaman dile bağımlılık tipik olarak vurgulanır örneğin C++ idiomları. Yani örneğin bir C++
idiom'u java da geçerli olmayabilir çünkü araç setleri her iki dilin tamamen farklıdır. 

idiom ile teknik arasındaki fark çok belirgin olmamakla beraber teknik denilince biraz daha kompleks dile bağlı
yani çok basit olmayan anlamında gelir. idiom ile teknik arasında ki sınır çok net değil örneğin birinin idiom 
dediğine bir başkası tekniik diyebilir. 

çok tipik C++ idiomları/teknikleri
SFINAE
CRTP


singleton pattern ise bir design pattern'dır. Yani programlama dilinden bağımsızıdr. Ya da örneğin factory method,
abstract factory method, observer bunlar birer tasarım kalıpları ve programla dilinden bağımsızdır.

Dilden bağımsız olarak singleton (tek nesne örüntüsü) denildiğinde kastedilen:
1)tek instance olmalı yani bir sınıf türünden tek nesne olmalı 2. bir nesne olmamalı
    tek nesne olmalı çünkü problem domainindeki karşılığı budur. Örneğin bir tane sistemi modellediğimizi düşünelim
    orada bir tane server olması, veya bir başka projede yapılan simülasyonda güneş'inde olduğunu düşünelim; güneşten
    sadece 1 tane vardır o halde güneş bir singleton olur. Yani güneş bir sınıf ile temsil ediliyor ise o sınıf türünden
    sadece 1 tane nesne olur. Problem domaininde böyle tekillik söz konusu ise onu temsil ederken de lojik bir hata veya 
    run time yönelik bir hata olmaması için onun da tekil olmsasını isteriz; 2. bir nesneyi oluşturmak gözden kaçmamalı
    bir hata olarak değerlendirilmeli. C++ gibi bir dilde de mümkünse bu zaten bırakın run time'ı compile time'daki bir hata
    olmalı. 
2)singleton sadece tekillik iile ilgili değildir 2. önemli bir koşul daha vardır: bu tek nesneye global bir erişim olmalıdır
burada global derken gloabl değişken anlamında değil global access olmalı. Yani ona herke erişebilmeli; örneğin güneşe her kod
erişebilmeli her kod server'ı kullanabilmeli. singleton'ın genel tanımı budur.

Neden bu kadar farklı singleton implementasyonları var?
Bir singleton'dan farklı farklı beklentiler olduğu için:
a)therad safe olucak mı olmayacak mı?
    biz bir implementasyon yaparız fakat multi-thread çalışıyor ise program örneğin birden fazla thread'in bir arada
    çalışması durumunda benim singleton'ınım ona uygun olmayabilir. Örneğin singleton nesnesinin ctor'ı 2. kez çağırılıyor
    olabilir yani multi-thread olmasından dolayı bir tane nesne olucak koşulu sağlanmayabilir.

b)kalıtım yapılıcak mı yapılmayacak mı?
c)static mi olmalı? yani şöyle bir singleton mı isteniyor ortada hiç daha o kullanılmasada örneğin main fonksiyonu çalışmaya
başladığında singleton nesnesi hayatta mı olmalı yoksa ilk defa kullanıldığında mı hayata getirilmeli?

c)dtor'ının çağırılması gerekiyor mu?
singleton'ınımızı oluşturduk her şey tamam fakat şöyle bir sorun var singleton dinamik olarak oluşturulmuş/allocate edilmiş
fakat bizim implementasyonumu onu delete etmiyor. Dolayısıyla delete edilmediği için dtor'ı çağırılmayacak bu bir problem oluşturur mu?
çünkü eğer ki ben onun program sonuna kadar kullanılmasını istiyorsam zaten bu memory leak oluşturmaz fakat tam tersi duruma göre 
problem oluşturu.

d)singleton dinamik olarak oluşturulacak ise onu bir pointer gösterir; bunu gösteren pointer raw pointer mı olacak 
yoksa smart pointer mı olacak? gibi birçok soru vardır.



burada generic programlama çok öenm taşır; çünkü generic programlama araçları olmaz ise her singleton sınıfının singleton özelliği
kazanması için bir kod tekrarı gerekir. singleton sınıfın varlık nedeni değildir singleton sınıfın requirement'ıdır. Yani örneğin
güneş sınıfının interface'i ile server sınıfının interface'si bambaşkadır. Fakat singleton olma nitelikleri için ortak bir koda 
sahip olmaları gerekir. İşte o ortak kodu bir generic programlama aracı ile implemente edebiliriz. 

En klasik singleton implementasyonu:
sınıfın ctor'ını private yapmalıyım ki client kodlar erişemesin,
kopyalama yoluyla oluşturulmaması içinde derleyici eğer copy ctor'ı yazarsa 
onun yazdğı  ctor public olacağı için onu da delete etmem gerekir

bu örnek thread safe değildir.

class Myclass {
public:
    static Myclass& get_instance()
    {
        if(!mp) {
            mp = new Myclass;
        }

        return *mp;
    }

    void foo();
    void bar();
    void baz();
    Myclass(const Myclass&) = delete;
    Myclass& operator=(const Myclass&) = delete;

private:
    Myclass()
    {
        std::cout << "Myclass object constructed\n";
    }
    inline static Myclass* mp{};
};

int main()
{
    Myclass::get_instance().bar;

    Myclass::get_instance().baz;

    //her defasında böyle uzun uzun Myclass::get_instance() yazmamak için
    //bunu bir referansa bağlayıp onu kullanmak daha kolaydır.

    auto& sng = Myclass::get_instance();

    sng.bar();
    sng.baz();
    
}


tabii her duruma uygun bir singleton yoktur, singleton'ı hangi özellikleri ağır basıyor hangi avantajları üstüne yoğunlaşıyoruz neyi
sağlaması gerekiyor ona göre implementasyon farklı olabilir.
