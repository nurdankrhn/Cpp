
friend declarations
özel bir bildirimle sıfın kodları olmayan başka kodların sınıfın private bölümüne erişimine olanak sağlanabiliyor.
semantik tarafının incelenmesi:
neden private öğelere başka kodların erişmesine izin vereyim? böyle bir bildirim(firend declarations) nesne yönelimli programlamanın en önemli ilkelerinden olan
data hiding veya diğer adıyla information hiding konusuna ters düşen bir durum değildir, çünkü client kodlar için yapılan bir bildirim değildir. C++'ta java C#
dillerin aksine sınıfın public interface'sinde sadece public öğeler değil aynı zamanda başlık dosyasındaki global öğelerde dahildir. Bizde bir sınıfın public arayüzü
dendiğinde sınıfın public bölümündeki üyeler + başlık dosyasında bildirilen global öğeler anlaşılmalıdır. Örneğin person.h isimli bir başlık dosyasında:

//person.h

class Person{
public:
    Person();
    void set_name();
    int get_age()const;
};

int cmp_person(const Person &p1, const Person &p2);

class PersonProxy{

};
bunlar person.h'daki öğeler ise cmp_person isimli global fonksiyonda sınıfın public interface'ine dahil diyebilir miyiz? KESİNLİKLE yani public bölüm + başlık dosyasındaki öğeler
yani PersonProxy sınıfıda doğrudan ana sınıf olmamasına rağmen sonuçta yukarıda ki sınıf ile ilgili işlem yapacak dolayısıyla o da public interface dahildir.

Örneğin string sınıfı için çağırılan operator==() fonksiyonu da global bir fonksiyon olmasına rağmen yukarıda bahsi geçen nedenlerden dolayı sınıfın public interface'ine ait olur.

#include <string>

int main()
{
    std::string name{"ahmet ersoy"};

    name += "can";

    //if(name == "mehmet ersoy") olsaydı da aynı anlama gelirdi hocamız böyle yazmıştı örneği göstermek için bu hale çevirdi

    if(opertator==(name, "mehmet esoy")) { 
    }
}
 Burada operator==() bir sınıfın public üye fonksiyonu değil bir global fonksiyondur fakat bunun için sınıfın public öğesi yani public fonksiyonu diyebiliriz;
 işte bu fonksiyonda olduğu gibi doğrudan sınıfın üye fonksiyonu olmadan bu tarz işlemleri bu örnekte  2 stringi karşılaştırma örneği idi örneği bazı fonksiyonların
 sınıfın private bölümüne erişim ihtiyacı vardır. Fakat dilin kuralları global fonksiyonların sınıfın private bölümüne erişemez diye bir kuralı  vardır. 
 Dilin kuralları gereği bu fonksiyonun sınıfın özel öğesine erişebilmesi için friend bildirimi yapılması lazım, Dolayısıyla friend bildirimi data hiding veya information hiding'den 
 taviz verilmesi anlamına gelmiyor  Çünkü bu sınıfın kendi kodlarına veriliyor dolayısıyla tipik olarak a )Başlık dosyasında bildiren global fonksiyonlara
  b)sınıfın iplementasyonunda kullanılan yardımcı sınıflara verilir. Çünkü bu yardımcı sınıfların sınıfın private bölümüne erişim yasağı vardır fakat ben bu bildirimi yaparak 
  onların da iplementasyonun bir parçası olduğunu ve sınıfın pravet bölümüne erişmesini sağlıyorum.

Asla client kodları için friend bildirimi yapmamalıyız, bunun yerine zaten gerekli olsa öğeleri public yaparız.

Yani eğer ki ben sınıfın private bölümünde bulunan veri elemanlarına client kodlarında ulaşmasını İstiyorsan bunları public yapmalıyım, İlla private bölümünde olacak diye bir şey yok.

friend bildiriminin sentaksi ise şu şekildedir:
a)bir free function (Global Func.) için 
b)bir başka sınıfın üye fonksiyonu için 
c)bir başka sınıfın tüm fonksiyonları için 
yani aslına bakarsak 3 farklı friend bildirimi var 

class Myclass{
public:
    friend void gf(Myclass&);
private:
    int mx;
    void func();
};

void gf(Myclass& r)
{
    Myclass x;
    Myclass *p{&x}; //bu fonk. için friend bildirimi yapılmasaydı fonksiyon içinde sınıfın private veri elemanlarına yapılan erişim sentaks hatası ile sonuçlanırdı

    r.mx = 10;
    p->func();
    x.func();
    
}
Friend bildiriminin sınıfın private bölümü ile public bölümü içinde yapılması arasında hiçbir fark yoktur. Aslında bu ender bir senaryodur.
Hocamız bunu iplementasyonun bir parçası olduğu için genelde private bölümünde bildirim yapıyor.

 Bu zamana kadar sınıfın kendi fonksiyonlarının sınıf tanımı içinde inline olarak tanımlanabildiğini gördük fakat bunun bir istisnası var sınıfın frien'lik verdiği sınıf tanımını 
 içeren name space'teki fonksiyonlar  Class definition içinde inline olarak tanımlanabilir böyle fonksiyonlara popüler olarak hidden friend deniliyor.
 class Myclass{
public:
    friend void gf(Myclass&)
{
    Myclass x;
    Myclass *p{&x}; 
    r.mx = 10;
    p->func();
    x.func();
    
}
private:
    int mx;
    void func();
};

a)bu legaldir, b) gf fonksiyonu hala Global bir fonksiyondur yani client kodlar tarafından erişebilirdir, friend bildirimi ile inline olarak tanımlandığı için sınıfın tanımı 
içinde inline olarak tanımlanabiliyor ve bu böylece sınıfın private  bölümüne erişebiliyor.

Ikinci bir friend bildirimi daha var: bir sınıfın üye fonksiyonu için başka bir sınıfta friend bildirimi yapmak :
class Nec{
public:
    void foo(int);

};

class Myclass{

private:
    friend void Nec::foo(int);
    void func();
};

void Nec::foo(int)
{
    Myclass m;
    m.func();//legal
}

Bir incopmlete type durumunda olan bir sınıfın üye fonksiyonu için frien bildirimi yapılamaz 

class Nec;

class Myclass{

private:
    friend void Nec::foo(int);//geçersiz
    void func();
};

Sınıfın özel üye fonksiyonlarına da friend bildirimi yapılabilir:

class  Myclass;
class Nec{
public:
    Nec(const Myclass&);
};

class Myclass{
public:
    friend Nec:Nec(const Myclass&);
private:
    int mx;
};

Nec:Nec(const Myclass& m)
{
    auto val = m.mx;
}
Bir diğer friend bildirimi ise:
Bir sınıfın tüm üye fonksiyonlarına friend bildirimi yapmak bu durumda sınıfı diğer sınıfın private bölümüne tamamen erişebilir hale getiriyoruz
Bu bildirimde class anahtar sözcüğünü kullanmak mecburidir ve burada class anahtar sözcüğünün kullandığımız için doğrudan incomplete type haline geliyor 
yani burada friend bildirimi yaptığımız sınıf incomplete type olabilir derleyici burada sınıfın tamamını görmek zorunda değildir sentaksas hatası meydana gelmez.

class Myclass {
public:
private:
    friend class Nec;
    //Dikkat kendisine friend'lik verdiğimiz sınıf friend bildiriminin görüldüğü yerde 
    //incomplete type olabilir
    int mx;
    void foo();
};

class Nec{
public:
    void f1(Myclass m)
    {
        m.mx = 345;
    }
    void f2()
    {
        Myclass mx;
        x.foo();
    }
};

Derleyicinin yazdığı yani implicitly declared olan özel üye fonksiyonlar için de friend bildirimi yapabiliriz, örneğin default ctor için  bunu yapalım:

class Myclass{

};

class Nec{
    friend Myclass::Myclass();
};

Sonuçlar:

1)Eğer A sınıfı B sınıfına friend'lik vermiş ise B sınıfı da A sınıfına friend'lik vermiş kabul edilmez.
Bu durumda B A'nın private bölümüne erişebilir fakat A B'nin private bölümüne erişemez;zaten baştan beri yazdığımız senaryoların hepsinde durum böyleydi.

2)A sınıfı B sınıfına friend'lik vermiş olsun B sınıfı da C sınıfına friend'lik vermiş olsun; bu durumda A sınıfı C sınıfına friend'lik vermiş olmaz 
yani C sınıfı A sınıfının private bölümüne erişemez.

class A{
    friend class B;
    void afoo();
};

class b{
    void bf()
    {
        A ax;

        ax.afoo();
    }
    friend class C;
};

class C{
    void cf()
    {
        A ax;
        ax.afoo();//geçersiz
    }
};


3)Super class'ın diğer adıyla base class'ın arkadaşlık verdiği sınıf sadece onun private bölümüne erişebilir ondan elde edilen child yani türemiş sınıfların 
private bölümüne erişim hakkı vermez, kalıtım konusu ile ilgili olduğundan o konu işlenince tekrar ele alınacaktır.

class Base {
    friend class Nec;

    void fbase();
};

class Der : public Base {
    void derfoo();
};

class Nec{
public:
    void necfoo()
    {
        Base b;
        b.fbase();
        Der d;
        d.derfoo();//sentaks hatası
    }
};


nested types/type members/member types için friedn bildirimi incelemesini bu konuyu işlerken ele alacağız.

Acaba bir başka kodda  sınıfımızın yalnızca belirli öğeleri için friend'lik verebilir miyiz?
Örneğin Nec sınıfı için sadece f1 ve f3 fonksiyonları için friend'lik vermek mümkün mü? Bunu "Attorney-client" idiom'u/tekniği ile yapabiliriz, ileri C++'ta hocanın ele aldığı bir konu.
class Nec {
private:
        void f1();
    void f2();
        void f3();
    void f4();
};
