ODR C++'ta bir diğer akronimlerden biridir. 
ODR: One Definition Rule 
Yazılımsal bazı birimlerin birden fazla bildirimi olabilir ama birden fazla tanımı olamaz demektir. 

void func(int x) {
    int x;
}

void func(int x) {
   
}
ODR ihlal edilmiştir, aynı fonksiyon ismine ait 2 tanım var. Farklı kaynak dosyalarda aynı isimli fonskiyon tanımları olsun bu durumda da ODR ihlal edilmiş olunurdu.
kerem.cpp
void func(int x) {
    int x;
}
ayhan.cpp
zeynep.cpp
void func(int x) {
    int x;
}
necati.cpp
Böyle bir durumu derleyicinin tespit etme şansı yoktur. Çünkü derleyicinin çalışma birimi kaynak dosyadır. Kaynak dosyalar arasındaki ilişkiyle derleyicinin bir işi yoktur. 
Dolayısıyla ODR'ın farklı kaynak dosyalardan ihlali sentaks hatasına neden olmaz; işte bu tarz durumlar için kullanılan bir terim var "no diagnostic required" yani her sentaks hatası
compile time'da derleyici tarafından saptanamayağı için bazı compile time'da aslında olmaması gereken ama compiler'ın saptayamadığı durumları C++ standartları  "no diagnostic required" diye isimlendiriyor.


Aynı durum global değişkenler içinde geçerlidir. Bir global değişkenin tanımını başlık dosyasına koyduğumuz zaman böylece ODR için tüm kapıları açmış oluruz. Çünkü başlık dosyaları her yerden dahil edilir bu da ODR'a neden olur.
Fakat şu şekilde olsa ODR'a neden olmaz:
extern int x;

Bir fonksiyonun inline extension'a tabi tutulabilmesi için derleyicinin fonksiyonun kodunu görmesi gerekiyor, fakat tanımı spesifik bir kaynal dosyaya eklersek diğer modüller buna erişemez. Öte yandan
başlık dosyasına eklersek de ODR ihlal edilmiş olur. Bunun için standartlar şöyle diyor: öyle istisna durumlar var ki  birden fazla tanım olmasına rağmen ODR ihlal edilmemiş oluyor. Fakat belirli şartlar altında:
1. inline fonskiyon olması fakat tanım birebir aynı olmak lazım(token by token aynı olmak zorunda).Ayrıca başlık dosyasına inline bir fonskiyon eklerken onun inline olarak expand edilip edilmeyeceğine emin olmalı mıyım? Böyle bir zorunluluğum yok!
header-only library: Başta boost olmak üzere C++'ın standart  kütüphanesinin modülleri yine başta olmak üzere birçok kütüphane header only library'dir. Klasik düzende .h ve .cpp dosyları olurken header only library olduğunda her şey bir dosyada 
toplanır. Bunu almakla işimizi bitiriyoruz.

Eğer fonksiyon internal linkage olsaydı bunda herhangi bir problem olmaz, fonksiyon sadece o modüle özgü olur.
static int foo(int x) 
{
    return x*x - 6;
}

static yaparsak obje koda yazılan referans biçimi şu şekilde olur:linker açısından baktığımızda farklı farklı kopyalar var, ama her kopya kendi modülünde biliniyor. İnline fonskiyon olunca ise 10 farklı kaynak dosyada olsada derlenmiş kodda 
sadece 1 tane vardır.

Öyle  fonksiyonlar var ki inline anahtar sözcüğünü kullanmasak bile impicit olarak inline olur: constexpr fonskiyonları, sınıfların non-static member funcitonlar ve friend functionlar, function templates'lar vb.
class Myclass {
public:
    //non-static member function
    void func(int x)
    {
        //
    }
};



