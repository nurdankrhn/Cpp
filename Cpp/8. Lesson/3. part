C++ 17 standartları ile dile önemli bir ekleme daha yapıldı:
inline variable:
sınıfların statik veri elemanları ve statik global değişkenleri 2017 C++ standartlarına kadar başlık dosyasına eklenmeleri doğal olarak ill-formed program oluşturuyordu.
Yani ODR ihlal ediliyordu.

C++ 2017 standartlarındandan önce global değişkenleri ve sınıfların statik veri elemanlarının bulunduğu bir header only library oluşturmak ill-formed program'a neden oluyordu.

2017 standart'ından bu sorun kalktı: 
inline int x = 10; //bu sayede nasıl fonskiyonlar inline anahtar sözcüğü ile tanımlanabiliyorsa global değişkenlerde inline anahtar sözcüğü ile tanımlayabiliriz, yine aynı anlama gelir:
1. bu bir global değişken
2. kaç tane kod dosyası bunu include ederse etsin sonuçta link aşamasında bu değişkenden sadece bir tane olur. Hem ODR ihlal edilmemiş olacak hem de tanımı artık başlık dosyasına 
ekeleyebileceğim.

Pekiyi 2017 standart'ından önce bu özellik olmadan aynı durumu nasıl uygulayabiliriz?
Bu değişkeni döndüren bir inline fonskiyon sayesinde değişkeni header only library olarak library dosyasında ODR ihlal etmeden istenen şeyi yerine getiririz.
inline int& foo()
{
   static int x{30};
   return x;
}
Artık bu değişkeni kullanmak isteyenin fonskiyonu çağırması yeterlidir.

FUNCTION OVERLOADING
Compile time yönelik bir araçtır, run time ile doğrudan hiçbir ilişkisi yoktur. Aynı isimli fonskiyonların bir arada bulma durumudur. C'de external linkage sahip isimlerin tek olması 
gerkiyor, fonskiyonlarda bir istisna değildir.
Birden fazla fonskiyona aynı ismi vermemizin nedeni bu değişkenler soyutlandıkları zaman belirli bir  soyutlama seviyesinde aynı işi yapıyorlar; sadece kodları farklıdır.
Örneğin C'de bir sayının mutlak değerini almak istediğimizde değişkeninin türüne göre farklı isimler vardır(absi fabs, labs, llabs). 
C++'ta böyle bir şey yerine function overloading ile her değişken için farklı fonksiyonlar olsada hepsine aynı isime sahip olduğundan programcı tarafından çağırılan fonskiyon 
hep aynı isimde olacaktı.

Bir fonksiyonu overlaod etmek ile override etmek çok farklı terimlerdir.
override----> run time yönelik bir araçtır.

Function overlaoding iyi bir araç olması için soyutlama gerçekleştiğinde aynı soyutlama yapabilmeli. Yani farklı işi yapan fonskiyonlar için function overloading olması 
faydadan çok zarar sağlar.

Function overloading varsa ve eğer bir fonksiyonçağrısı yapılıyor ise derleyici çok önemli bir süreci yönetir, bu sürece "function overload resulation" denir.
Yani fonskiyon çağrısı hangi fonskiyona bağlanacağının tespitinin yapıldığı sürecidir.

Function overloading'de 2 önemli soru vardır:
1. Fonksiyonda function overloading olup olmadığı? (Bunun fonksiyon çağrısıyla bir ilgisi yoktur!!!)
2. Fonksiyon çağrısında fonksiyonun hangi fonksiyona bağlanacağını anlamak için izlenecek kurallar nelerdir?

Ortada function overloading'in olması, çağırılan fonksiyonun hangi fonksiyon olduğunun anlaşılması programın derleme zamanında olur!!!

Fonksiyon çağrısında;
a)Dereyici bir koda bakarak statik olarak derleme zamanında hangi fonksiyonun çağırıldığını anlıyorsa ve o fonskiyonun çağırılacağı şekilde bir kod üretiyorsa bir çağrının 
fonskiyona bu şekilde bağlanmasına -->static binding  veya early binding denir. (unction overloading bu anlamda static binding'dir)
b)C++ dahil birçok programlama dilinde olan başka araçlar vardır. Hangi fonksiyonun çağırıldığı programın çalışma zamanında belli olur. Yani programın çalışma zamanında bir kod
çalışır bu kod hangi fonksiyonun çağırılması gerektiğini anlar. Yani derleyici conpile time bakarak aslında hangi fonksiyonun çağırıldığını bilmez. Hangi fonksiyonun
çağırıldığını belirleyen derleyicinin ürettiği compile time'da çalışan bir koddur. Buna --->dynamic binding veya late binding (function overriding ise late binding oluşturuyor) denir.

1)Function overloading olup olmadığının tespiti?
function overloading olması için belli başlı şartlar vardır:
a)fonksiyonların isimleri aynı olmalıdır.
b)kapsamları(scope) aynı olmalıdır. Fonksiyonlar isimlendirilmiş varlıklardır, her ismin bir kapsamı vardır.
C'de skop kategorileri:
   file scope --->global isimler
   block scope
   {
      int x;
   }
   function prototype scope
   void func(int a, int b);
   function scope--->go to label

C++'ta bulunan skop kategorileri:
   namespace scope
   class scope
   block scope 
   function prototype scope
   function scope

Örneğin global skoba sahip ve blok skoba sahip aynı isimli fonksiyonlar function overloading oluşturamazlar çünkü aynı skopta değillerdir.

void foo(int)

int main()
{
   void foo(double);
}

c) fonskiyonların imzaları farklı olmalıdır. Bir fonksiyonun imzası demek fonksiyon geri dönüş değeri dışındaki parametrik yapısıdır. Örneğin:
int foo(int , int); ve double fun(int, int); foo ve func'ın imzaları aynı geri dönüş değerleri farklıdır. Yani fonksiyon imzası derken parametrik yapı kastediliyor. Yani kaç parametreye sahip olduğu o parametre sabitlerinin türü vb
ama geri dönüş değeri türü dahil edilmiyor.

İmzaları aynı, geri dönüş değeri farklı aynı isimde olan fonksiyonlar funstion overloading değildir ve sentaks hatasıdır. Çünkü dilin sentaksını çiğner:
int func(int);
double func(int);
İmza aynı, kapsam aynı, geri dönüş değeri türü de aynı bu function overloading değildir bu function redeclaration'dır. 
int func(int);
int func(int);

function overlaoding:
int funt(int);
int funt(long);
int funt(int, int);
int funt(double, int); //+ tane function overlaoding 

Eğer ki parametre referans veya pointer değilse parametrenin const anahtar sözcüğü ile function overloading oluşturmaz function redeclaration oluşturur:
int func(int);
int func(const int);

Eğer ki bunun function overloading değilde redeclaration olduğunu kanıtlamak istersek:
Her iki fonskiyon tanımını dosyada yaparız aynı fonksiyon 2 kere tanımlanamadığı için derleyici sentaks hatsından dolayı hata verir:
int func(int)
{
   return 1;
}

int func(const int)
{
   return 1;
}
SENTAKS HATASI OLUŞUR!!



