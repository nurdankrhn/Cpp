20 Ocak 2023 - CUMA

Fonksiyonların default arguman alması:

Default arguments
 Fonksiyon bildiriminde veya tanımında kaç tane parametresi varsa fonksiyon çağrısında da o kadar sayıda argüman göndermek zorundayım. 
 Bunun istisnası C'deki variadic fonksiyonlardır. Örneğin: printf, scanf, fprintf, fscanf gibi C'nin standart kütüphanesinde bulunan fonksiyonlar verilebilir.
 Bir fonksiyonun variadic olduğunu C ve C++ dillerinde (...) fonksiyon parametresine elipsis atomu ekleyerek belirtiriz, buna variadic parametre diyebiliriz:
 void func(int, int, ...); 
 Variadic parametre son parametre olmak zorundadır. Birden fazla variadic parametre olamaz. Böyle bir fonksiyona yapılan çağrıda variadic parametreden önceki 
 parametreler için argüman geçmek zorundayız, ve variadic parametre karşılığı 0 veya n tane argüman geçebiliriz. Örneğin printf'in bildirimi:
 
 int printf(const char*, ...); şeklindedir.

 printf fonskiyonu ismi print formatted'dan gelmektedir.

C++'tada variadic fonskiyonları kullanabilirm fakat legacy kod base söz konusu değilse genelde bunun yerine farklı daha iyi alternatifler kullanılır.

Modern programlama dillerinde C hariç çoğunlukla fonksiyonların parametre değişkenleri sayısından daha az sayıda argüman ile çağırılmasını sağlayan
araçlar vardır. İşte bu araçlar'ın oluşturduğu kümeye "default arguments" denir.

default arguments nedir: Derleyici, çevirici program fonksiyona ilişkin bildirimden ya da tanımdan bir fonskiyonun çağrısında belirli parameter ya da 
parametre değişkenlerine argüman gönderilmediği zaman, hangi değerlerin argüman olarak gönderildiğini bildirimden anlıyor. Böylece çok sayıda parametreye sahip
bir fonskiyonu daha az sayıda argüman ile çağırabiliriz. Bu mekanizmanın run time ile doğrudan ilgisi yoktur. Derleme zamanına yönelik bir araçtır. 
Üretimde öyle fonskiyonlar vardır ki, bu fonksiyonların 1 veya birden fazla parametresine yapılan çağrıda çoğunlukla aynı argüman gönderimi yapılır. Sadece bazı
özel durumlarda o paremetre/parametrelere farklı argümanlar geçeriz. İşte bu tarz bir durumda default arguments aracı çok faydalı hale gelir.


Ayrıca fonksiyonun çok parametreli olması durumunda, fonksiyona çağrı yapılırken yanlış parametreye argüman gönderimi çok olasıdır. Eğer argüman geçmediğim zaman
hangi değerlerin parametreye gönderileceği baştan belli ise böylece hata yapma olasılığı oldukça azalmış olur. İşte default argument buna yarar.

  Bir fonskiyonun varsayılan argümanları tipik olarak fonksiyon bildiriminde belirtiliyor. Çünkü bazı durumlarda fonskiyon bildirimi ile fonksiyon tanımı ayrı değildir
  yani fonksiyon ayrıca bildirlmemiştir, sadece  tanımı vardır. O halde sadece fonksiyon tanımını gören derleyici şüphesiz varsayılan argümanlar fonksiyon tanımında
  belirtilir.

int g{};

void func (int a, int b, int c = g + 10);
Bir fonksiyonun 1 veya 1'den fazla parametresi için varsayılan argüman belirlenebilir. Eğer bir parametre varsayılan 
argüman alıyorsa onun sağında kalan tüm parametreler varsayılan argüman almak zorundadır.

O halde bu şekilde bir bildirim sentaks hatası olur:
void func (int a, int b = 10, int c ); //sentaks hatası
Yani varsayılan argüman alan parametreler sonda olmalıdır. Yani fonksiyon çağrısı yapan kişi sadece son parametrelerine
argüman göndermeme şansına sahip olur.
func(10, , 2); //sentaks hatası

Dolayısıyla C++'ta sadece fonskiyon çağrısına bakılarak, fonskiyon parametresi değişkeni sayısını kestiremeyiz.
Varsayılan argüman olan ifadelerde daha önceki parametre değişkenlerini kullanamayız.

void func (int x, int y = x + 10);//sentaks hatası

Varsayılan argüman bildirildi halde fonskiyona istediğim argümanı geçebilirim:

void func(int  = 10, int = 20, int = 30);

int main()
{
   func(1, 2, 3);
   func(2, 2);
   func(1);
   func();
}
  
Varsayılan argümanlar eğer bildirimde belirtilmiş ise tanımlamada kesinlikle belirtilmezler!!!
Eğer derleyici hem bildirimi hem de tanımlamayı görüyor ise ve her ikisinde de varsayılan argüman belirtiliyor ise
durumu kesinlikle sentaks hatası olarak değerlendirir.

Yani varsayılan argüman özdeş olsa dahi tekrar edemez!!!
void foo(int, int = 20);
void foo(int, int = 20);//sentaks hatası


Varsayılan argüman tamsayı türünden veya gerçek sayı türünden olmak zorunda değildir. Örneğin pointer parametre
varsayılan argüman alabilir:

void func(int *p = nullptr);
void func(const char *p_err = "error");


Referans parametre'de varsayılan argüman alabilir:

void print(int x, std::ostream& os = std::cout);

maximal munc kuralı
Derleyicinin nasıl tokenizing yapması gerektiğini anlatan bir kural. Eğer space karakterleri ile token'lar
ayrılmadıysa derleyici token'ları elde etmek için maximal munch kuralını uygular. Derleyici dosyadan karakteri alır,
ve hangi kategoride olduğunu anlıyor, ardından boşluk görene kadar, token olma özelliği devam edene kadar karakter eklemesi yapar
o şekilde tokenizing yapar.

int main()
{
    int x = 20;
    int y = 30;

   int z = x+++y; // bu deyim şu şekilde ele alınır: x++ + y; sonuç 50 olur
   // x + ++y olsaydı sonuc 51 olurduu
}

Bir örnek de şu olabilir: sum>>=++ x derleyici şu şekilde ele alır:
sum
>>=
++ 
x

Bir başka örnek de şudur:

int main()
{
   int n = 5;
   while(n --> 0 ) { // eşdeğeri şudur: while(n-- > 0) maximal munch!!!
       //code  
   }
}


maximal munch kuralının varsayılan argümanlarda gösterimi:
maximal munch kuralı çok önceki aşamalarda olan bir şey olduğu için eğer ki varsayılan argümanlarda token'ları 
birleştirirsek sentaks hatası oluşur:
void func(int, const char *= "necati"); // sentaks hatası ,aslında bildirilen fonksiyon şuydu:
void func(int, const char * = "necati"); //maximal munch'a girdi *= bir operatör: compound assignment operators
































 
 
