Varsayılan argüman sentaksında = token'ı kullanılmak zorundadır. 
void func(int x{}); böyle bir sentaks yoktur!!

Kaynak kodumuza dahil ettiğimiz başlık dosyasında bulunan bir fonksiyon için varsayılan argüman eklemek istersek
eğer bunu asla başlık dosyasındaki fonskiyon bildirimine müdahalede bulunarak yapmamalıyız. Bunu yapmanın en iyi 
yolu: "function redecleration"dır.
Yani bu başlık dosyasını dahil ettiğimiz noktada, o fonksiyon içinde bir bildirim daha yaparız, çünkü derleyici
fonksiyon bildirimleri için kümülatif işlem yapar.

Örneğin başlık dosyası cpp.h isminde int foo(int, int, int) isimli bir fonksiyon içersin. Bizde bu fonksiyonun
son parametresine 0 varsayılan argümanı geçmek istiyorsak; bu başlık dosyasını kaynak kodumuza eklediğimiz yerde
bu fonksiyon için yeniden bildirim yapmalıyız.

#include "cpp.h"

int foo(int, int, int = 0); 

Başka bir başlık dosyasında şöyle bir bildirim olduğunu varsayalım:
int bar(int x, int y, int z = 30); Biz fonksiyon çağrısında genel olarak y parametresine de 10 değerini
argüman olarak geçecek isek bunun için de yeniden bildirim yapmalıyız:

int bar(int x, int y = 10, int z); böyelikle hem z için hem de y parametresi için varsayılan argüman 
belirlemiş olduk. Derleyici gözünden olaya bakarsak:
int bar(int x, int y, int z = 30);
int bar(int x, int y = 10, int z); sonuç söyleymiş gibi olur o halde
int bar(int x, int y = 10, int z = 30);

Varsayılan argüman olan ifadenin değeri hesaplanıp her fonksiyon çağrısında o değer kullanılmaz; varsayılan argüman olan
ifadenin kendisi doğrudan fonksiyon çağrısında argüman olarak yazılır.

int x = 10;

int func(int a  = ++x  )
{
    std::cout << "a = " << a << '\n ';
}

int main()
{
      func(); //11
      func(); //12
      func(); //13
}

Eğer ki ortada bulunan parametre için varsayılan argüman kullanmak istersem, sentaks gereği varsayılan argümanlar
sonda olmak zorunda olduğu için bir wrapper fonksiyon kullanabilirim. Örneğin void func(int x, int y, int z);
isimli bir fonskiyon için ben y parametresi için varsayılan argüman belirtmek istersem şu şekilde yapabilirim:

void func(int x, int y, int z);

void func_(int x, int z, iny y = 0)
{
    func(x, y, z);
}


C'deki başlık dosyalarını C++'ta include ederken sonunda ki .h kalkıp başına c eklenir. Örneğin time.h başlık
dosyasını eklemek istersek:
#include <ctime> şeklinde olur.

Bazen varsayılan argüman olarak bütün değerlerin -1 olduğunu gördüğümüz fonksiyon bildirimleri olur.
Bunun sebebi çoğunlukla varsayılan argüman kullanıp kullanılmadığını kontrol etmektir.

#include <iostream>
#include <ctime>

void process_data(int mday = -1, int month =-1, int year = -1)
{
    if(year == -1)
    {
        std::time_t timer{};
        std::time(&timer);
        auto tp = localtime(timer); //struct tm *tp = localtime(timer)
        year = tp->tm_year + 1990;
        if(month == -1) {
            month = tp->tm_month + 1;
            if(mday == -1) {
                mday = tp->tm_day;
            }
        }
    }

    std::cout << mday << '-' << month << '-' << year << '\n';
}

int main()
{
    using namespace std;

    process_date(12, 5, 1993);
    process_date(12, 5);
    process_date(12);
    process_date();
}

Tek karakter yazdırma için hocamız genelde ' tırnak içerisine yazımı öneriyor!!! Örneğin new line yani yeni 
satıra geçmek için '\n' şeklinde yazmalyız "\n" şeklinde değil!!!!

Typecast operators
type-cast --> eğer aşağıda bulunan tür dönüştürme operatörleri değilde C'den gelen type-cast operatörü ile tür dönüşümü yapıyorsak c-style-cast
terimini kullanabiliriz.

(targey_type) //tür dönüştürme operatörü
static_cast
const_cast
reinterpret_cast
dynamic_cast

C'de kullanılan type-cast operatörü dışında olan diğer tür dönüştürme operatörlerine C++'ta neden ihtiyaç duyuldu?
C'de bulunan ve tek olan tür dönüştürme operatörü olan typ-cast operatörü (explicit type conversion) farklı farklı senaryolarda/amaçlarda yapılan 
tür dönüşümleri için kullanılıyordu. C++'ta her amaca yönelik farklı tür dönüşüm operatörü vardır. Böylece koda bakar bakmaz anahtar kelimelerden 
hangi amaçla tür dönüşümü yapıldığını anlarız. Böylece bir amaca yönelik bir dönüşüm yaparken yanlışlıkla farklı bir tür dönüşüm operatörü 
kullanırsak; dilin sentaksına uymadığı için hata alır ve bu hata riskini ortadan kaldırmış oluruz.

Kısa bir C tekrarı:
Tür dönüşümünü nerelerde yapıyoruz?
En çok karşımıza çıkan dönüşümlerden biri: Bir ifadenin içinde operatör veya operatörler bulunuyor, fakat eğer ki explicit tür dönüşümü
yapılmaz ise ifade bizim istediğimiz türde yapılmıyor.
int i1 = 10, i2 = 6;
i1/i2---> sonucun gerçek sayı türünden olabilmesi için operandlardan en az birini double türden yapmalıyız. O halde şöyle olmak zorundadır:
(double)i1/i2 şeklinde olmalıdır; böylece (double)i1 ifadesi double türden bir değer üretir, bu durumda operandlar'dan biri double biri int türünde 
olduğundan bu seferde implicit type conversion ile 2. operan'da double türüne dönüştürülür ve işlem double türden yapılır.

Bir diğer örnek çarpma işleminde taşma aralığını daha büyük tutmak için daha büyük tam sayı türünde çarpma işlemi yapmak:
int i1 = 34, i2 = 11;
(long long)i1 * i2 şeklinde sonuç türünü büyütmüş oluruz.

Veri kaybının olma ihtimali olan atamalarda dönüşüm implicit gerçekleşmesine rağmen kodu okuyana bunun bilinçli yapıldığını göstermek amacı ile yapılan tür 
dönüşümleri:
int main()
{
        int ival = 323234;

        char c = (char)ival; //char c =ival; şekinde olsaydı kodu okuyan yanlışlıla böyle bir atama yapıldığını düşünürdü.
        //gerçek sayı türlerinden tam sayı türlerine yapılan atamalar
        double dval = 12.5;
        int num = (int)dval;

        
}

C'de her ne kadar önerilmese de const T* türünden T* türüne dönüşüm sentaks hatası değildir. (C++'ta sentaks hatası)

int main()
{
        int x  45235;
        const int* cptr = &x;
        int *p = (int *)cptr; //C++ta int *p = cptr; sentaks hatası C'de derleyici uyarı verir fakat her 2 dilde de bu yazım yanlış ve  yapılması istenmeyen
                              //bir durumdur.
}

Örneğin C'de bulunan strchr standart fonksiyonunu ele alalım:

char* strchr(const char *p, int c)
{
    while(*p) {
        if(*p == c ) {
                return (char *) p; // C'de return p; senatks hatası değil ama hem C++ ile uyumlu olsun hem de doğrusu böyle olduğundan bu şekilde yazmak gerekir 
        }
        ++p;
    }

    if(c == '\0')
        return (char *) p;


    return NULL;
}
















